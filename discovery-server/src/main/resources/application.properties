server.port=8090
eureka.client.register-with-eureka=false
eureka.client.fetch-registry=false
eureka.client.serviceUrl.defaultZone=http://localhost:${server.port}

#eureka.server.enable-self-preservation: Configuration for disabling self-preservation – the default value is true
eureka.server.enableSelfPreservation=false

#eureka.server.expected-client-renewal-interval-seconds: The server expects client heartbeats at an interval configured with this property – the default value is 30
#eureka.server.expected-client-renewal-interval-seconds=15

#eureka.instance.lease-expiration-duration-in-seconds: Indicates the time in seconds that the Eureka server waits since it received the last heartbeat from a client before it can remove that client from its registry – the default value is 90
#eureka.instance.lease-expiration-duration-in-seconds=17

#eureka.server.eviction-interval-timer-in-ms: This property tells the Eureka server to run a job at this frequency to evict the expired clients – the default value is 60 seconds
eureka.server.eviction-interval-timer-in-ms=3000

#eureka.server.renewal-percent-threshold: Based on this property, the server calculates the expected heartbeats per minute from all the registered clients – the default value is 0.85
#eureka.server.renewal-threshold-update-interval-ms: This property tells the Eureka server to run a job at this frequency to calculate the expected heartbeats from all the registered clients at this minute – the default value is 15 minutes

#Eureka Server - eureka.server.responseCacheUpdateInvervalMs
#
#30 seconds. Eureka server's APIs have its own cache for response. The default is quite big period. You can decrease this value.
eureka.server.responseCacheUpdateInvervalMs=2000